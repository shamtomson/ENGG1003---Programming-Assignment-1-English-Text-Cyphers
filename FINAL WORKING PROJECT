/* Task selection menu */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void UPPERCASE(char str[]);
void rotationencryption(char inputtext[], char rot);
void rotationdecryption(char inputtext2[], char rot);
void substitutionencryption(char inputtext3[], char substitution[]);
void substitutiondecryption(char inputtext4[], char substitution2[]);
void rotationdecryptionhard(char inputtext5[]);




int main() {
    FILE *selection;
    FILE *rotation;
    FILE *message;
    FILE *encryptedmessage;
    FILE *thekey;
    
    printf("Please select from the following menu by entering the integer of desired pathway");
    printf(" into 'selection.txt' file:\n\n");
    
    printf("     1. Encryption of a message with a rotation cypher given the message text and rotation amount\n");
    printf("     2. Decryption of a message encrypted with a rotation cypher given cypher text and rotation amount\n");
    printf("     3. Encryption of a message with a substitution cypher given the message text and alphabet substitution\n");
    printf("     4. Decryption of a message encrypted with a substitution cypher given cypher text and substitutions\n");
    printf("     5. Decryption of a message encrypted with a rotation cypher given cypher text only\n");
    printf("     6. Decryption of a message encrypted with a substitution cypher given cypher text only\n\n");
    
    selection = fopen("selection.txt", "r");
    int item;
    fscanf(selection, "%d", &item);
    
    switch (item){
        case(1):
        printf("You selected:\n     1. Encryption of a message encrypted with a rotation cypher given cypher text and rotation amount\n\n");
     
                                                 /* FINDING ROTATION */
        int rot; 
        printf("Enter the rotation amount into 'rotation.txt' file:\n"); //This is a user prompt to enter the rotation amount
        rotation = fopen("rotation.txt", "r");
        fscanf(rotation, "%d", &rot);    //this stores the rotation amount as a integer variable 
        
                                                  /* FINDING MESSAGE */
        printf("Enter the message to be encrypted into 'message.txt' file:\n\n"); //This promts user to enter the encrypted message to be decrypted
        char inputtext[1023]; //this is an array of type char which will store each character entered into input
        message = fopen("message.txt", "r");
        fscanf(message,"%[^\n]s", inputtext); //This stores the input text into array as a string, also ensuring that all whitespace remains using %[^\n]s
                                             
                                             /* CONVERTING MESSAGE TO UPPERCASE */
        UPPERCASE(inputtext);
                                             
                                             /* PASSING MESSAGE TO FUNCTION */
        rotationencryption(inputtext, rot);
        break;
        
        
        case(2):
        printf("You selected:\n     2. Decryption of a message encrypted with a rotation cypher given cypher text and rotation amount\n\n");
  
                                                 /* FINDING ROTATION */
        printf("Enter the rotation amount into 'rotation.txt' file:\n"); //This is a user prompt to enter the rotation amount
        rotation = fopen("rotation.txt", "r");
        fscanf(rotation, "%d", &rot);    //this stores the rotation amount as a integer variable 
    
                                                /* FINDING CYPHER TEXT */
        printf("Enter the encrypted message into 'encryptedmessage.txt' file:\n"); //This promts user to enter the encrypted message to be decrypted
        char inputtext2[1023]; //this is an array of type char which will store each character entered into input
        encryptedmessage = fopen("encryptedmessage.txt", "r");
        fscanf(encryptedmessage,"%[^\n]s", inputtext2); //This stores the input text into array as a string, also ensuring that all whitespace remains using %[^\n]s
                                             
                                              /* CONVERTING MESSAGE TO UPPERCASE */
        UPPERCASE(inputtext2);
                                               
                                               /* PASSING MESSAGE TO FUNCTION */
        rotationdecryption(inputtext2, rot); 
        break;
        
        
        
        case(3):
        printf("You selected:\n     3. Encryption of a message with a substitution cypher given the message text and alphabet substitution\n\n");
        
                                                /*FINDING SUBSTITUTION KEY */                                      
        char substitution[26]; 
        printf("Enter the substitution key into 'key.txt' file:\n"); 
        thekey = fopen("key.txt", "r");
        fscanf(thekey,"%[^\n]s", substitution);
        
                                               /* FINDING MESSAGE TO BE ENCRYPTED */
        char inputtext3[1026];
        printf("Enter the message to be encrypted into 'message.txt' file:\n\n");
        message = fopen("message.txt", "r");
        fscanf(message,"%[^\n]s", inputtext3); //This stores the input text into array as a string, also ensuring that all whitespace remains using %[^\n]s
                            
                                              /* CONVERTING MESSAGE TO UPPERCASE */
        UPPERCASE(inputtext3);
        UPPERCASE(substitution);
                                        
                                                /* PASSING MESSAGE TO FUNCTION */
        substitutionencryption(inputtext3, substitution);
        
        
        break;
        
        case(4):
        printf("You selected:\n     4. Decryption of a message encrypted with a substitution cypher given cypher text and substitutions\n\n");
         
        char substitution2[26]; 
        printf("Enter the substitution key into 'key.txt' file:\n"); 
        thekey = fopen("key.txt", "r");
        fscanf(thekey,"%[^\n]s", substitution2);
  
        printf("Enter the encrypted message into 'encryptedmessage.txt' file:\n\n"); //This promts user to enter the encrypted message to be decrypted
        char inputtext4[1023]; //this is an array of type char which will store each character entered into input
        encryptedmessage = fopen("encryptedmessage.txt", "r");
        fscanf(encryptedmessage,"%[^\n]s", inputtext4);
    
        UPPERCASE(substitution2);
        UPPERCASE(inputtext4);
    
        substitutiondecryption(inputtext4, substitution2);
        
        break;
        
        case(5):
        printf("You selected:\n     5. Decryption of a message encrypted with a rotation cypher given cypher text only\n\n");
        
        printf("Enter the encrypted message into 'encryptedmessage.txt' file:\n"); //This promts user to enter the encrypted message to be decrypted
        char inputtext5[1023]; //this is an array of type char which will store each character entered into input
        encryptedmessage = fopen("encryptedmessage.txt", "r");
        fscanf(encryptedmessage,"%[^\n]s", inputtext5);

        UPPERCASE(inputtext5);
        
        rotationdecryptionhard(inputtext5);
        
        break;
        
        case(6):
        printf("You selected: Decryption of a message encrypted with a substitution cypher given cypher text only\n\n");
        
        
        
        
        
        
        break;
        
        default:
        printf("Please try again by selecting an option from the menu\n");
    }
    
   fclose(selection); 
   
return 0;
}

/* UPPERCASE FUNCTION */
void UPPERCASE(char str[])
{
   int i = 0;			
   int length;
   length = strlen (str);
   printf ("length is %d\n", length);
   while (i < length) {
      if ((str[i] > 96) && (str[i] < 123)) {
          str[i] = str[i] - 32; 
          }
      i++;
    }
    printf("The string converted to uppercase letters is: %s\n", str);
}


/* TASK 1 FUNCTION */

void rotationencryption(char inputtext[], char rot)

{
    int length; 
    length = strlen(inputtext); 
    printf("The length is: %d\n", length);
    int i = 0; 
    char letter = 1; 
    printf("The message: %s. With a rotation %d is:\n", inputtext, rot); 
    
    while(i < length){
        if((inputtext[i] > 90 - rot) && (inputtext[i] <= 90)){ //uppercase is from 65-90 in ASCII table
            letter = inputtext[i] + rot - 26;
            printf("%c", letter);
            i++;
        }
        else if((inputtext[i] <= 90 - rot) && (inputtext[i] >= 65)){
            letter = inputtext[i] + rot; 
            printf("%c", letter);
            i++;
        }
        else if(inputtext[i] == 32){
            printf(" ");
            i++;
        }
        else{
            letter = inputtext[i];
            printf("%c", letter);
            i++;
        }
    }
}

/* TASK 2 FUNCTION */
void rotationdecryption(char inputtext2[], char rot){
        
    int length; //this variable will be used for the length so that function only converts parts of the array within the string lenth
    length = strlen(inputtext2); //determines the length of string found within the inputtetx array
    int i = 0; //this is used as a counter for differemt array elements so that they maintain order
    char letter = 1; //this variable is not entirely necessary but is used for convinience when converting from ASCII number to letter
    printf("The inputtext: %s. With rotation %d is\n", inputtext2, rot); //this is used to ensure that the correct input ile has been used for standard input
    
    while(i < length){
        if((inputtext2[i] >= 65) && (inputtext2[i] <= 64 + rot)){ //uppercase is from 65-90 in ASCII table
            letter = inputtext2[i] + (26 - rot);
            printf("%c", letter);
            i++;
        }
        else if((inputtext2[i] <= 90) && (inputtext2[i] > 64 + rot)){
            letter = inputtext2[i] - rot; 
            printf("%c", letter);
            i++;
        }
        else if(inputtext2[i] == 32){
            printf(" ");
            i++;
        }
        else{
            letter = inputtext2[i];
            printf("%c", letter);
            i++;
        }
}
} 

/* TASK 3 FUNCTION */
void substitutionencryption(char inputtext3[], char substitution[]){
    
    printf("\nThe encryption key is: %s\nThe message to be encrypted is: %s\n\n", substitution, inputtext3);
    int length; //this variable will be used for the length so that function only converts parts of the array within the string lenth
    length = strlen(inputtext3); //determines the length of string found within the inputtetx array
    int i = 0; //this is used as a counter for differemt array elements so that they maintain order
    char letter = 1;
    printf("Encrypted message is: ");
    while (i < length) {
            if (inputtext3[i] == 'A') {
                    letter = substitution[0];
                    printf("%c", letter);
                    i++;}
    else if (inputtext3[i] == 'B') {
        letter = substitution[1];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'C') {
        letter = substitution[2];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'D') {
        letter = substitution[3];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'E') {
        letter = substitution[4];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'F') {
        letter = substitution[5];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'G') {
        letter = substitution[6];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'H') {
        letter = substitution[7];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'I') {
        letter = substitution[8];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'J') {
        letter = substitution[9];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'K') {
        letter = substitution[10];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'L') {
        letter = substitution[11];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'M') {
        letter = substitution[12];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'N') {
        letter = substitution[13];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'O') {
        letter = substitution[14];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'P') {
        letter = substitution[15];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'Q') {
        letter = substitution[16];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'R') {
        letter = substitution[17];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'S') {
        letter = substitution[18];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'T') {
        letter = substitution[19];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'U') {
        letter = substitution[20];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'V') {
        letter = substitution[21];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'W') {
        letter = substitution[22];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'X') {
        letter = substitution[23];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'Y') {
        letter = substitution[24];
        printf("%c", letter);
        i++;}
    else if (inputtext3[i] == 'Z') {
        letter = substitution[25];
        printf("%c", letter);
        i++;}
    else if(inputtext3[i] == 32){
        printf(" ");
        i++;}
    else{
        letter = inputtext3[i];
        printf("%c", letter);
        i++;}
}

}

void substitutiondecryption(char inputtext4[], char substitution2[]){
    
    printf("\nThe encryption key is: %s\nThe message to be decrypted is: %s\n\n", substitution2, inputtext4);
    int length; //this variable will be used for the length so that function only converts parts of the array within the string lenth
    length = strlen(inputtext4); //determines the length of string found within the inputtetx array
    int i = 0; //this is used as a counter for differemt array elements so that they maintain order
               // char letter = 1;
    printf("Decrypted message is: ");
    char letter;
    
    while (i <= length) {
    if (inputtext4[i] == substitution2[0]){
        printf("A");
        i++;}
    else if (inputtext4[i] == substitution2[1]){
        printf("B");
        i++;}
    else if (inputtext4[i] == substitution2[2]){
        printf("C");
        i++;}
    else if (inputtext4[i] == substitution2[3]){
        printf("D");
        i++;}
    else if (inputtext4[i] == substitution2[4]){
        printf("E");
        i++;}
    else if (inputtext4[i] == substitution2[5]){
        printf("F");
        i++;}
    else if (inputtext4[i] == substitution2[6]){
        printf("G");
        i++;}
    else if (inputtext4[i] == substitution2[7]){
        printf("H");
        i++;}
    else if (inputtext4[i] == substitution2[8]){
        printf("I");
        i++;}
    else if (inputtext4[i] == substitution2[9]){
        printf("J");
        i++;}
    else if (inputtext4[i] == substitution2[10]){
        printf("K");
        i++;}
    else if (inputtext4[i] == substitution2[11]){
        printf("L");
        i++;}
    else if (inputtext4[i] == substitution2[12]){
        printf("M");
        i++;}
    else if (inputtext4[i] == substitution2[13]){
        printf("N");
        i++;}
    else if (inputtext4[i] == substitution2[14]){
        printf("O");
        i++;}
    else if (inputtext4[i] == substitution2[15]){
        printf("P");
        i++;}
    else if (inputtext4[i] == substitution2[16]){
        printf("Q");
        i++;}
    else if (inputtext4[i] == substitution2[17]){
        printf("R");
        i++;}
    else if (inputtext4[i] == substitution2[18]){
        printf("S");
        i++;}
    else if (inputtext4[i] == substitution2[19]){
        printf("T");
        i++;}
    else if (inputtext4[i] == substitution2[20]){
        printf("U");
        i++;}
    else if (inputtext4[i] == substitution2[21]){
        printf("V");
        i++;}
    else if (inputtext4[i] == substitution2[22]){
        printf("W");
        i++;}
    else if (inputtext4[i] == substitution2[23]){
        printf("X");
        i++;}
    else if (inputtext4[i] == substitution2[24]){
        printf("Y");
        i++;}
    else if (inputtext4[i] == substitution2[25]){
        printf("Z");
        i++;}
    else if(inputtext4[i] == 32){
        printf(" ");
        i++;}
    else{
        letter = inputtext4[i];
        printf("%c", letter);
        i++;}  
    }

}

void rotationdecryptionhard(char inputtext5[]){
  
  char ArrayForMostUsed[1024] = { 0 };
  int i = 0;
  int max, insidearray, index = 0;
  

  for (i = 0; inputtext5[i] != 0; i++) {
          insidearray = inputtext5[i];
      ++ArrayForMostUsed[insidearray];
      }
  
  max = ArrayForMostUsed[0];

  for (i = 0; inputtext5[i] != 0; i++) {
          insidearray = inputtext5[i];
      if ((ArrayForMostUsed[insidearray] > max) && (inputtext5[i] != 32)) {
          insidearray = inputtext5[i];
          max = ArrayForMostUsed[insidearray];
          index = i; } }
  printf ("The most used character is: %c\n", inputtext5[index]);
           //we assume the letter most used is either e, or t
  printf ("The value of most common character is %d\n\n", inputtext5[index]);
  printf("Since E is the most commonly appearing letter in an English sentence, the difference between the value of E and most common letter of the cypher %c could give the rotation amount\n",
     inputtext5[index]);
  printf("The subsequent tests will test for the rotation amount given that the most common letter is not E");
  printf(" but instead T, A, I, N, O or S\n\n\n");
  
  char mostcommonletter = inputtext5[index];
  
  int rot;
  rot = mostcommonletter; //
  if(rot >= 'E'){
    rot = rot - 'E'; }   //E is 69 therefore the difference between a letter > E -69 will give the integer rotation amount
  else{
    rot = (26 + rot) - 'E'; }    
  printf("The rotation amount is likely %d if the most common letter is E\n" , rot);
  rotationdecryption(inputtext5, rot);
 
 //NOW TESTING FOR T 
   
  rot = mostcommonletter; 
  if(rot >= 'T'){
    rot = rot - 'T'; } //E is 69 therefore the difference between a letter > E -69 will give the integer rotation amount  
  else{
    rot = (26 + rot) - 'T'; }
  printf("\n\nThe rotation amount is likely %d if the most common letter is T\n" , rot);
  rotationdecryption(inputtext5, rot);
   
 //NOW TESTING FOR A 
   
  rot = mostcommonletter; 
  if(rot >= 'A'){
    rot = rot - 'A'; } //E is 69 therefore the difference between a letter > E -69 will give the integer rotation amount  
  else{
    rot = (26 + rot) - 'A'; }
  printf("\n\nThe rotation amount is likely %d if the most common letter is A\n" , rot);
  rotationdecryption(inputtext5, rot);
 
//NOW TESTING FOR I 
   
  rot = mostcommonletter; 
  if(rot >= 'I'){
    rot = rot - 'I'; } //E is 69 therefore the difference between a letter > E -69 will give the integer rotation amount  
  else{
    rot = (26 + rot) - 'I'; }
  printf("\n\nThe rotation amount is likely %d if the most common letter is I\n" , rot);
  rotationdecryption(inputtext5, rot);
   
//NOW TESTING FOR O
   
  rot = mostcommonletter; 
  if(rot >= 'O'){
    rot = rot - 'O'; } //E is 69 therefore the difference between a letter > E -69 will give the integer rotation amount  
  else{
    rot = (26 + rot) - 'O'; }
  printf("\n\nThe rotation amount is likely %d if the most common letter is O\n" , rot);
  rotationdecryption(inputtext5, rot);
   
//NOW TESTING FOR N
  rot = mostcommonletter; 
  if(rot >= 'N'){
    rot = rot - 'N'; } //E is 69 therefore the difference between a letter > E -69 will give the integer rotation amount  
  else{
    rot = (26 + rot) - 'N'; }
  printf("\n\nThe rotation amount is likely %d if the most common letter is N\n" , rot);
  rotationdecryption(inputtext5, rot);
  
}

